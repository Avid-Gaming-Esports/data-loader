[{"C:\\Users\\justi\\Desktop\\avid\\data-loader\\my-app\\src\\index.tsx":"1","C:\\Users\\justi\\Desktop\\avid\\data-loader\\my-app\\src\\reportWebVitals.ts":"2","C:\\Users\\justi\\Desktop\\avid\\data-loader\\my-app\\src\\App.tsx":"3","C:\\Users\\justi\\Desktop\\avid\\data-loader\\my-app\\src\\components\\View.tsx":"4","C:\\Users\\justi\\Desktop\\avid\\data-loader\\my-app\\src\\components\\Table.tsx":"5","C:\\Users\\justi\\Desktop\\avid\\data-loader\\my-app\\src\\components\\Search.tsx":"6","C:\\Users\\justi\\Desktop\\avid\\data-loader\\my-app\\src\\store\\actionTypes.ts":"7","C:\\Users\\justi\\Desktop\\avid\\data-loader\\my-app\\src\\store\\actionCreators.ts":"8","C:\\Users\\justi\\Desktop\\avid\\data-loader\\my-app\\src\\components\\Metadata.tsx":"9","C:\\Users\\justi\\Desktop\\avid\\data-loader\\my-app\\src\\components\\JSONComponent.tsx":"10","C:\\Users\\justi\\Desktop\\avid\\data-loader\\my-app\\src\\components\\CSVComponent.tsx":"11","C:\\Users\\justi\\Desktop\\avid\\data-loader\\my-app\\src\\components\\Selector.tsx":"12","C:\\Users\\justi\\Desktop\\avid\\data-loader\\my-app\\src\\store\\reducer.ts":"13","C:\\Users\\justi\\Desktop\\avid\\data-loader\\my-app\\src\\components\\Constants.tsx":"14","C:\\Users\\justi\\Desktop\\avid\\data-loader\\my-app\\src\\store\\rootReducer.ts":"15","C:\\Users\\justi\\Desktop\\avid\\data-loader\\my-app\\src\\store\\optReducer.ts":"16"},{"size":981,"mtime":1611443946605,"results":"17","hashOfConfig":"18"},{"size":440,"mtime":1611279548029,"results":"19","hashOfConfig":"18"},{"size":290,"mtime":1611279548014,"results":"20","hashOfConfig":"18"},{"size":2389,"mtime":1611443990484,"results":"21","hashOfConfig":"18"},{"size":4822,"mtime":1611443002282,"results":"22","hashOfConfig":"18"},{"size":1649,"mtime":1611431490433,"results":"23","hashOfConfig":"18"},{"size":226,"mtime":1611480358469,"results":"24","hashOfConfig":"18"},{"size":670,"mtime":1611480359424,"results":"25","hashOfConfig":"18"},{"size":374,"mtime":1611443032208,"results":"26","hashOfConfig":"18"},{"size":608,"mtime":1611443055749,"results":"27","hashOfConfig":"18"},{"size":2571,"mtime":1611482767526,"results":"28","hashOfConfig":"18"},{"size":7147,"mtime":1611480983059,"results":"29","hashOfConfig":"18"},{"size":5377,"mtime":1611445446094,"results":"30","hashOfConfig":"18"},{"size":4517,"mtime":1611279548016,"results":"31","hashOfConfig":"18"},{"size":285,"mtime":1611442861125,"results":"32","hashOfConfig":"18"},{"size":3884,"mtime":1611482122040,"results":"33","hashOfConfig":"18"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},"p4uwig",{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"57","messages":"58","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59","usedDeprecatedRules":"36"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\justi\\Desktop\\avid\\data-loader\\my-app\\src\\index.tsx",[],["68","69"],"C:\\Users\\justi\\Desktop\\avid\\data-loader\\my-app\\src\\reportWebVitals.ts",[],"C:\\Users\\justi\\Desktop\\avid\\data-loader\\my-app\\src\\App.tsx",[],"C:\\Users\\justi\\Desktop\\avid\\data-loader\\my-app\\src\\components\\View.tsx",[],"C:\\Users\\justi\\Desktop\\avid\\data-loader\\my-app\\src\\components\\Table.tsx",[],"C:\\Users\\justi\\Desktop\\avid\\data-loader\\my-app\\src\\components\\Search.tsx",[],"C:\\Users\\justi\\Desktop\\avid\\data-loader\\my-app\\src\\store\\actionTypes.ts",[],"C:\\Users\\justi\\Desktop\\avid\\data-loader\\my-app\\src\\store\\actionCreators.ts",[],"C:\\Users\\justi\\Desktop\\avid\\data-loader\\my-app\\src\\components\\Metadata.tsx",[],"C:\\Users\\justi\\Desktop\\avid\\data-loader\\my-app\\src\\components\\JSONComponent.tsx",[],"C:\\Users\\justi\\Desktop\\avid\\data-loader\\my-app\\src\\components\\CSVComponent.tsx",[],"C:\\Users\\justi\\Desktop\\avid\\data-loader\\my-app\\src\\components\\Selector.tsx",["70","71"],"import React, { useState } from 'react';\r\nimport { Dispatch } from \"redux\"\r\nimport { useDispatch, useSelector } from \"react-redux\"\r\nimport { Accordion, Card, Form } from 'react-bootstrap';\r\n\r\nimport { Constants } from './Constants';\r\n\r\nimport { RootState } from \"../store/rootReducer\";\r\n\r\nimport '../style/Selector.css';\r\n\r\nimport { changePreset, changeSelectors, toggleOutput } from '../store/actionCreators';\r\n\r\nfunction handleChangePreset(dispatch: Dispatch<any>, target: string) {\r\n  dispatch(changePreset({\r\n    preset: Constants.PRESET_ARRAYS[target]\r\n  }))\r\n}\r\n\r\nfunction handleChangeSelectors(dispatch: Dispatch<any>, store: optState) {\r\n  dispatch(changeSelectors({\r\n    statOpt: store.statOpt\r\n  }))\r\n}\r\n\r\nfunction handleToggleOutput(store: optState, dispatch: Dispatch<any>, target: string) {\r\n  let outputDict: {[key: string] : boolean} | undefined = \r\n  store.outputTypes;\r\n  if(outputDict) {\r\n    outputDict[target] = !outputDict[target]\r\n  }\r\n  dispatch(toggleOutput({\r\n    outputTypes: outputDict\r\n  }))\r\n}\r\n\r\nfunction Selector() {\r\n  const dispatch: Dispatch<any> = useDispatch();\r\n  const store = useSelector((state: RootState) => state.opt);\r\n  const [outputExpander, setOutputExpander] = useState(\"+\");\r\n  const [statExpander, setStatExpander] = useState(\"+\");\r\n  return (\r\n  <Accordion className=\"metadata\">\r\n    <Card>\r\n      <Accordion as={Card.Header}>\r\n      <Card className=\"group-by\">\r\n        Output &amp; Presets\r\n        <Accordion.Toggle \r\n        as={Card} \r\n        eventKey=\"1\" \r\n        className=\"group-by-expander\"\r\n        onClick={(_e) => {\r\n            if (outputExpander === \"+\"){\r\n              setOutputExpander(\"-\");\r\n            } else {\r\n              setOutputExpander(\"+\");\r\n            }\r\n          }}>\r\n            {outputExpander}\r\n        </Accordion.Toggle>\r\n      </Card>\r\n      <Accordion.Collapse eventKey=\"1\">\r\n      <div>\r\n      <Form.Group className=\"radios\">\r\n          <b>Preset: </b>\r\n          <Form.Check\r\n            type=\"radio\"\r\n            label=\"Minimal\"\r\n            name=\"formHorizontalRadios\"\r\n            id=\"formHorizontalRadios1\"\r\n            className=\"radio-option\"\r\n            onChange={(_e) => { \r\n              handleChangePreset(dispatch, \"minimal\");\r\n            }}\r\n          />\r\n          <Form.Check\r\n            type=\"radio\"\r\n            label=\"Advanced\"\r\n            name=\"formHorizontalRadios\"\r\n            id=\"formHorizontalRadios2\"\r\n            className=\"radio-option\"\r\n            defaultChecked\r\n            onChange={(_e) => { \r\n              handleChangePreset(dispatch, \"advanced\");\r\n            }}\r\n          />\r\n          <Form.Check\r\n            type=\"radio\"\r\n            label=\"All\"\r\n            name=\"formHorizontalRadios\"\r\n            id=\"formHorizontalRadios3\"\r\n            className=\"radio-option\"\r\n            onChange={(_e) => { \r\n              handleChangePreset(dispatch, \"all\");\r\n            }}\r\n          />\r\n          <Form.Check\r\n            type=\"radio\"\r\n            label=\"None\"\r\n            name=\"formHorizontalRadios\"\r\n            id=\"formHorizontalRadios4\"\r\n            className=\"radio-option\"\r\n            onChange={(_e) => { \r\n              handleChangePreset(dispatch, \"none\");\r\n            }}\r\n          />\r\n      </Form.Group>\r\n      <Form.Group className=\"radios\">\r\n          <b>Output: </b>\r\n          <Form.Check\r\n            type=\"checkbox\"\r\n            label=\"JSON\"\r\n            name=\"outputOption\"\r\n            id=\"outputOption1\"\r\n            className=\"radio-option\"\r\n            defaultChecked\r\n            onChange={(_e) => { \r\n              handleToggleOutput(store, dispatch, \"JSON\");\r\n            }}\r\n          />\r\n          <Form.Check\r\n            type=\"checkbox\"\r\n            label=\"CSV\"\r\n            name=\"outputOption\"\r\n            id=\"outputOption2\"\r\n            className=\"radio-option\"\r\n            defaultChecked\r\n            onChange={(_e) => { \r\n              handleToggleOutput(store, dispatch, \"CSV\");\r\n            }}\r\n          />\r\n          <Form.Check\r\n            type=\"checkbox\"\r\n            label=\"CSV (Headless)\"\r\n            name=\"outputOption\"\r\n            id=\"outputOption3\"\r\n            className=\"radio-option\"\r\n            defaultChecked\r\n            onChange={(_e) => { \r\n              handleToggleOutput(store, dispatch, \"CSV-Headless\");\r\n            }}\r\n          />\r\n      </Form.Group>\r\n      </div>\r\n      </Accordion.Collapse>\r\n      </Accordion>\r\n    </Card>\r\n    <Card>\r\n      <Accordion as={Card.Header}>\r\n        <Card className=\"group-by\">\r\n          <Form.Check\r\n            type=\"checkbox\"\r\n            label=\"Stats\"\r\n            name=\"statMasterOption\"\r\n            id=\"statsMaster\"\r\n            checked={(store.statOpt?.map((key, _value) => {\r\n              return key[Object.keys(key)[0]]\r\n            }))?.some((element) => element)}\r\n            onChange={(_e) => { \r\n              if (Constants.PRESET_ARRAYS[\"stats\"].filter(value => \r\n                store.preset?.includes(value)\r\n              ).length > 0) {\r\n                let newPreset : string[] | undefined = store.preset?.filter(value => \r\n                  !Constants.PRESET_ARRAYS[\"stats\"].includes(value)\r\n                )\r\n                // handleChangeSelectors(dispatch, newPreset);\r\n              } else {\r\n                let newPreset : string[] | undefined = Constants.PRESET_ARRAYS[\"stats\"].filter(value => \r\n                  !store.preset?.includes(value)\r\n                )\r\n                if (store.preset) {\r\n                  newPreset = store.preset.concat(newPreset);\r\n                }\r\n                // handleChangeSelectors(dispatch, newPreset);\r\n              }\r\n            }}\r\n          />\r\n          <Accordion.Toggle \r\n          as={Card} \r\n          eventKey=\"2\" \r\n          className=\"group-by-expander\"\r\n          onClick={(_e) => {\r\n            if (statExpander === \"+\"){\r\n              setStatExpander(\"-\");\r\n            } else {\r\n              setStatExpander(\"+\");\r\n            }\r\n          }}>\r\n              {statExpander}\r\n          </Accordion.Toggle>\r\n        </Card>\r\n        <Accordion.Collapse eventKey=\"2\" >\r\n        <div>\r\n        <Form.Group className=\"radios\">\r\n          {store.statOpt?.map((key, val) => {\r\n            return (\r\n              <Form.Check\r\n                type=\"checkbox\"\r\n                label={Object.keys(key)[0]}\r\n                name=\"statsOption\"\r\n                id={\"statsOption\" + val.toString()}\r\n                key={val}\r\n                className=\"radio-option\"\r\n                checked={key[Object.keys(key)[0]]}\r\n                onChange={(_e) => {\r\n                  let index;\r\n                  if(store.statOpt) {\r\n                    index = store.statOpt[val];\r\n                    console.log(index)\r\n                    index[Object.keys(index)[0]] = !index[Object.keys(index)[0]]\r\n                    console.log(index)\r\n                  }\r\n                  handleChangeSelectors(dispatch, store);\r\n                }}\r\n              />)\r\n          })}\r\n          </Form.Group>\r\n        </div>\r\n        </Accordion.Collapse>\r\n      </Accordion>\r\n    </Card>\r\n  </Accordion>\r\n  );\r\n}\r\n\r\nexport default Selector;","C:\\Users\\justi\\Desktop\\avid\\data-loader\\my-app\\src\\store\\reducer.ts",[],"C:\\Users\\justi\\Desktop\\avid\\data-loader\\my-app\\src\\components\\Constants.tsx",[],"C:\\Users\\justi\\Desktop\\avid\\data-loader\\my-app\\src\\store\\rootReducer.ts",[],"C:\\Users\\justi\\Desktop\\avid\\data-loader\\my-app\\src\\store\\optReducer.ts",[],{"ruleId":"72","replacedBy":"73"},{"ruleId":"74","replacedBy":"75"},{"ruleId":"76","severity":1,"message":"77","line":163,"column":21,"nodeType":"78","messageId":"79","endLine":163,"endColumn":53},{"ruleId":"76","severity":1,"message":"77","line":172,"column":51,"nodeType":"78","messageId":"79","endLine":172,"endColumn":60},"no-native-reassign",["80"],"no-negated-in-lhs",["81"],"@typescript-eslint/no-unused-vars","'newPreset' is assigned a value but never used.","Identifier","unusedVar","no-global-assign","no-unsafe-negation"]